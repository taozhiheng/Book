
    
  
    ![picture](http://upload.jianshu.io/users/upload_avatars/83901/bbe8f89cb1e0.jpg?imageMogr/thumbnail/90x90/quality/100)
    

    NeoAndBob
  
      Always be the worst musician in a band.

  
  
    ![picture](http://jianshu-prd.b0.upaiyun.com/assets/social_icons/48/home-262e288438e1edb07c4cf2e2d0804dfb.png)
  


    
      
        #动态规划——【转】划分数问题
        
          
            
              ![picture](http://upload.jianshu.io/users/upload_avatars/83901/bbe8f89cb1e0.jpg?imageMogr/thumbnail/90x90/quality/100)
            
            +NeoAndBob
        
        
    
    发表于 

    
      NOIP实习录

    2014-10-20 18:43

    

    阅读量: 37
  


        
            


  
     整数划分问题是算法中的一个经典命题之一，有关这个问题的讲述在讲解到递归时基本都将涉及。所谓整数划分，是指把一个正整数n写成如下形式:
   n=m1+m2+...+mi; （其中mi为正整数，并且1 &lt;= mi &lt;= n），则{m1,m2,...,mi}为n的一个划分。
   如果{m1,m2,...,mi}中的最大值不超过m，即max(m1,m2,...,mi)&lt;=m，则称它属于n的一个m划分。这里我们记n的m划分的个数为f(n,m);
   例如但n=4时，有5个划分，{0,0,0,4},{0,0,3,1},{0,0,2,2},{0,2,1,1},{1,1,1,1};
   注意{0,0,1,3} 和 {0,0,3,1}被认为是同一个划分。
   该问题是求出n的所有划分个数，即f(n, n)。下面我们考虑求f(n,m)的方法;</pre>
###递归法
<p>根据n和m的关系，考虑以下几种情况：
   （1）当 n = 1 时，不论m的值为多少（m &gt; 0 )，只有一种划分即 { 1 };

  
  <code>    因此 f(1, m) = 1;</code></pre>
   （2）当 m = 1 时，不论n的值为多少，只有一种划分即 n 个 1，{ 1, 1, 1, ..., 1 };
<p>
  <code>    因此 f(n, 1) = 1;</code></pre>
   （3）当 n = m 时，根据划分中是否包含 n，可以分为两种情况：
             a. 划分中包含n的情况，只有一个即 { n }；
             b. 划分中不包含n的情况，即划分中最大的数字也比 n 小，也就是 n 的所有 ( n - 1 ) 划分。
<p>
  <code>    因此 f(n, n) = 1 + f(n, n-1);</code></pre>
   （4）当 n &lt; m 时，由于划分中不可能出现负数，因此就相当于 f(n, n)， 转至第三种情况;
   （5） 但 n &gt; m 时，根据划分中是否包含最大值 m，可以分为两种情况：
              a. 划分中包含 m 的情况，即 { m, { x1, x2, ..., xi } }, 其中 { x1, x2, ..., xi } 的和为 （n - m），可能再次出现 m，因此是（n - m）的 m 划分，因此这种划分个数为 f(n-m, m);
              b. 划分中不包含 m 的情况，则划分中所有值都比 m 小，即 n 的 ( m - 1 ) 划分，个数为 f(n, m - 1);
<p>
  <code>    因此 f(n, m) = f(n - m, m) + f(n, m - 1);</code></pre>
        综合以上情况，我们可以看出，上面的结论具有递归定义特征，其中（1）和（2）属于回归条件，（3）和（4）属于特殊情况，将会转换为情况（5）。而情况（5）为通用情况，属于递推的方法，其本质主要是通过减小m以达到回归条件，从而解决问题。其递推表达式如下：
<p>
  <code>f(n, m) =     1;                ( n = 1 or m = 1 )
        f(n, n);              ( n &lt; m )
        1+ f(n, m - 1);            ( n = m )
        f(n - m, m) + f(n, m - 1);    ( n &gt; m )</code></pre>

给出代码如下（c/c++实现）
<p>
<pre><code>    int f(int i, int j)
    {
        int ret;
        if (j == 1 || i == 1)//情况（1）,（2）
            return 1;
        else if (i == j)//情况（3）
            ret = 1 + f(i,j-1);
        else if (i &lt; j)//情况（4）
            ret = f(i, i);
        else if (i &gt; j)//情况（5）
            ret = f(i-j,j) + f(i,j-1);
        return ret;
    }</code></pre>

注：本文原稿摘自http://www.cnblogs.com/hoodlum1980/archive/2008/10/11/1308493.html

        
             
      整数划分问题是算法中的一个经典命题之一，有关这个问题的讲述在讲解到递归时基...
      
    
    
      
      
      
          
             推荐拓展阅读
        
      
    
    
      
          
     喜欢

      
      
        +
                  
        +
          ![picture](http://jianshu-prd.b0.upaiyun.com/assets/weixin_share_out-092e0f24fed532b7b2c00423fdd080f8.png)
        
      
    
  


